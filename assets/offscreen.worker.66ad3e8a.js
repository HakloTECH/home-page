(function(){"use strict";class u{constructor(){this.cache={}}async loadPainter(t,a){if(t in this.cache)return this.cache[t];const{painters:e}=await import(t);if(!e)return{success:!1};let s=!1,d,r;for(r in e){const p=a[r];if(p){d=()=>e[r].init(p),s=!0;break}}const f={success:s,ctxName:r,init:d};return this.cache[t]=f,f}}const w=new u;let n;const o={};let c,l=null,h;self.onmessage=async i=>{switch(i.data.type){case"init":{const{ctxNames:t}=i.data;n=i.data.canvases;for(let a=t.length;a--;)o[t[a]]=n[a].getContext(t[a]);break}case"load":{const{scriptURL:t}=i.data;if(l===t)return 0;const{success:a,ctxName:e,init:s}=await w.loadPainter(t,o);if(!a)return 0;l=t,h=async()=>{await(c==null?void 0:c()),c=(await s()).dispose,postMessage({type:"paintEnd",ctxName:e})},postMessage({type:"loaded"});break}case"paintStart":{await h();break}case"resize":{const{width:t,height:a}=i.data;for(let e=n.length;e--;){const s=n[e];!s||(s.width=t,s.height=a)}break}}}})();
