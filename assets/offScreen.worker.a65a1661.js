var P=Object.defineProperty;var _=(c,i,r)=>i in c?P(c,i,{enumerable:!0,configurable:!0,writable:!0,value:r}):c[i]=r;var w=(c,i,r)=>(_(c,typeof i!="symbol"?i+"":i,r),r);(function(){"use strict";const c="modulepreload",i={},r="./",y=function(t,a){return t()};class k{constructor(){w(this,"cache",{})}async loadPainter(t,a){if(t in this.cache)return this.cache[t];const{painters:e}=await y(()=>import(t),void 0);if(!e)return{success:!1};let s=!1,h,n;for(n in e){const u=a[n];if(u){h=()=>e[n].init(u),s=!0;break}}const f={success:s,ctxName:n,init:h};return this.cache[t]=f,f}}const v=new k;let l;const p={};let d,m=null,g;self.onmessage=async o=>{switch(o.data.type){case"init":{const{ctxNames:t}=o.data;l=o.data.canvases;for(let a=t.length;a--;)p[t[a]]=l[a].getContext(t[a]);break}case"load":{const{scriptURL:t}=o.data;if(m===t)return 0;const{success:a,ctxName:e,init:s}=await v.loadPainter(t,p);if(!a)return 0;m=t,g=async()=>{await(d==null?void 0:d()),d=(await s()).dispose,postMessage({type:"paintEnd",ctxName:e})},postMessage({type:"loaded"});break}case"paintStart":{await g();break}case"resize":{const{width:t,height:a}=o.data;for(let e=l.length;e--;){const s=l[e];!s||(s.width=t,s.height=a)}break}}}})();
